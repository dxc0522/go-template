// Code generated by goctl. DO NOT EDIT.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chargingDataFieldNames          = builder.RawFieldNames(&ChargingData{})
	chargingDataRows                = strings.Join(chargingDataFieldNames, ",")
	chargingDataRowsExpectAutoSet   = strings.Join(stringx.Remove(chargingDataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chargingDataRowsWithPlaceHolder = strings.Join(stringx.Remove(chargingDataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chargingDataModel interface {
		Insert(ctx context.Context, data *ChargingData) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ChargingData, error)
		Update(ctx context.Context, data *ChargingData) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultChargingDataModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChargingData struct {
		Id         uint64          `db:"id"`
		Waterpower sql.NullFloat64 `db:"waterpower"`
		Allpower   sql.NullFloat64 `db:"allpower"`
		Allmoney   sql.NullFloat64 `db:"allmoney"`
		Initpower  sql.NullFloat64 `db:"initpower"`
		Lastpower  sql.NullFloat64 `db:"lastpower"`
		Difference sql.NullFloat64 `db:"difference"`
		Price      sql.NullInt64   `db:"price"`
		Date       sql.NullTime    `db:"date"`
		Uuid       string          `db:"uuid"`
	}
)

func newChargingDataModel(conn sqlx.SqlConn) *defaultChargingDataModel {
	return &defaultChargingDataModel{
		conn:  conn,
		table: "`charging_data`",
	}
}

func (m *defaultChargingDataModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChargingDataModel) FindOne(ctx context.Context, id uint64) (*ChargingData, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chargingDataRows, m.table)
	var resp ChargingData
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChargingDataModel) Insert(ctx context.Context, data *ChargingData) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, chargingDataRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Waterpower, data.Allpower, data.Allmoney, data.Initpower, data.Lastpower, data.Difference, data.Price, data.Date, data.Uuid)
	return ret, err
}

func (m *defaultChargingDataModel) Update(ctx context.Context, data *ChargingData) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chargingDataRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Waterpower, data.Allpower, data.Allmoney, data.Initpower, data.Lastpower, data.Difference, data.Price, data.Date, data.Uuid, data.Id)
	return err
}

func (m *defaultChargingDataModel) tableName() string {
	return m.table
}
